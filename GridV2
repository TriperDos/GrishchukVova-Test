using UnityEngine;
using System.Collections;
using System;

public class floorObjectPlacement : MonoBehaviour
{

    public GameObject prefabPlacementObject;
    public GameObject prefabOK;
    public GameObject prefabFail;
    public GameObject shop;

    public float grid = 2.0f;

   
    int[,] usedSpace;

    GameObject placementObject = null;
    GameObject areaObject = null;

    bool mouseClick = false;
    Vector3 lastPos;
    public GameObject obj;
    public GameObject Tree;
    public GameObject Rock;
    public GameObject CloseBuildButton;



    void Start()
    {       
        Vector3 slots = GetComponent<Renderer>().bounds.size / grid;
        usedSpace = new int[Mathf.CeilToInt(slots.x), Mathf.CeilToInt(slots.z)];
        for (var x = 0; x < Mathf.CeilToInt(slots.x); x++)
        {
            for (var z = 0; z < Mathf.CeilToInt(slots.z); z++)
            {
                usedSpace[x, z] = 0;
            }
        }
    }

   
    void Update()
    {
        Vector3 point;

        // Проверить на столкновение луча мыши с этим объектом

        if (getTargetLocation(out point))
        {
            Vector3 halfSlots = GetComponent<Renderer>().bounds.size / 2.0f;

            // центральная точка этого объекта
            int x = (int)Math.Round(Math.Round(point.x - transform.position.x + halfSlots.x - grid / 2.0f) / grid);
            int z = (int)Math.Round(Math.Round(point.z - transform.position.z + halfSlots.z - grid / 2.0f) / grid);

            // где на самом деле разместить объект
            point.x = (float)(x) * grid - halfSlots.x + transform.position.x + grid / 2.0f;
            point.z = (float)(z) * grid - halfSlots.z + transform.position.z + grid / 2.0f;

            // Создайте объект, чтобы показать, доступна ли эта область для строительства.
            // Повторная реализация только тогда, когда слот изменился или объект вообще не был создан
            if (lastPos.x != x || lastPos.z != z || areaObject == null)
            {
                lastPos.x = x;
                lastPos.z = z;
                if (areaObject != null)
                {
                    Destroy(areaObject);
                }
                areaObject = (GameObject)Instantiate(usedSpace[x, z] == 0 ? prefabOK : prefabFail, point, Quaternion.identity);
            }

            // Создать или переместить объект

            if (!placementObject)
            {
                placementObject = (GameObject)Instantiate(prefabPlacementObject, point, Quaternion.identity);
            }
            else
            {
                placementObject.transform.position = point;
            }

            // Щелкните левой кнопкой мыши, вставьте объект в область и отметьте его как «использованный».

            if (Input.GetMouseButtonDown(0) && mouseClick == false)
            {
                mouseClick = true;
                // Поместить объект
                if (usedSpace[x, z] == 0)
                {
                    usedSpace[x, z] = 1;

                    // поставить объект
                    Instantiate(prefabPlacementObject, point, Quaternion.Euler(-90,0,0));
                }
            }
            else if (!Input.GetMouseButtonDown(0))
            {
                mouseClick = false;
            }

        }
        else
        {
            if (placementObject)
            {
                Destroy(placementObject);
                placementObject = null;
            }
            if (areaObject)
            {
                Destroy(areaObject);
                areaObject = null;
            }
        }
    }

    bool getTargetLocation(out Vector3 point)
    {
        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);

        RaycastHit hitInfo = new RaycastHit();
        if (Physics.Raycast(ray, out hitInfo, Mathf.Infinity))
        {
            if (hitInfo.collider == GetComponent<Collider>())
            {
                point = hitInfo.point;
                return true;
            }
        }
        point = Vector3.zero;
        return false;
    }

    public void SetTree()
    {
        shop.SetActive(!shop.activeSelf);
        CloseBuildButton.SetActive(true);
        obj.GetComponent<floorObjectPlacement>().enabled = true;
        prefabPlacementObject = Tree;
    }

    public void SetRock()
    {
        shop.SetActive(!shop.activeSelf);
        CloseBuildButton.SetActive(true);
        obj.GetComponent<floorObjectPlacement>().enabled = true;
        prefabPlacementObject = Rock;
    }

    public void StopBuild()
    {
        obj.GetComponent<floorObjectPlacement>().enabled = false;
        CloseBuildButton.SetActive(false);
    }
}
